trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  acrName: 'roshniacr'
  imageRepository: 'test' 
  tags: '$(Build.BuildId)'
  vmImage: 'ubuntu-latest'
  acrLoginServer: 'roshniacr.azurecr.io'
  acrUsername: '$(acrUsername)'  # Replace with your actual ACR username
  acrPassword: '$(acrPassword)'  # Replace with your actual ACR password
  k8sCluster: 'https://test-roshni.api.server'
  k8sNamespace: 'default'
  k8sManifestsPath: '$(Build.SourcesDirectory)/manifests'

stages:
- stage: Build
  displayName: 'Build stage'
  jobs:
  - job: Build
    displayName: 'Build'
    pool:
      vmImage: $(vmImage)
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: '$(acrLoginServer)'
        repository: '$(acrLoginServer)/$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '$(tags)'

- stage: Deploy
  displayName: 'Deploy stage'
  dependsOn: Build
  jobs:
  - job: KubernetesDeploy
    displayName: 'Kubernetes Deployment'
    pool:
      vmImage: $(vmImage)
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - checkout: self

    - script: |
        # Ensure kubectl is available
        sudo az aks install-cli

        # Set kubeconfig to the correct path
        export KUBECONFIG=$(Agent.BuildDirectory)/kubeconfig

        # Print kubeconfig for debugging
        cat $(Agent.BuildDirectory)/kubeconfig

        # Authenticate with Azure using service principal
        az login 
        az aks get-credentials --resource-group $(resource-group) --name test-roshni

        # Deploy to Kubernetes
        kubectl apply -f $(k8sManifestsPath)/deploy.yml -n $(k8sNamespace)
        kubectl apply -f $(k8sManifestsPath)/svc.yml -n $(k8sNamespace)

      displayName: 'Deploy to Kubernetes cluster'
